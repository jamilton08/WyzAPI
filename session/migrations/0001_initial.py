# Generated by Django 5.1.1 on 2024-09-30 12:24

import django.db.models.deletion
import options.clean
import task.time_master
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('organizations', '0007_alter_organization_slug'),
        ('services', '0001_initial'),
        ('tiempo', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='OverlappingSessions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.BooleanField()),
                ('approved', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='EnviromentalSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('overwatchers_restrict', models.BooleanField(default=False)),
                ('service_receiver_restrict', models.BooleanField(default=False)),
                ('service_providers_restrict', models.BooleanField(default=False)),
                ('active_time', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_session', to='tiempo.wyztimemodel')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_float_models', to='organizations.organization')),
                ('overwatchers', models.ManyToManyField(related_name='%(class)s_attending_overwatcher', to=settings.AUTH_USER_MODEL)),
                ('service_providers', models.ManyToManyField(related_name='%(class)s_attending_providers', to=settings.AUTH_USER_MODEL)),
                ('service_receiver', models.ManyToManyField(related_name='%(class)s_attending_reciever', to=settings.AUTH_USER_MODEL)),
                ('session_provider', models.ManyToManyField(related_name='%(class)s_hosting_enviroment', to=settings.AUTH_USER_MODEL)),
                ('session_provider_class', models.ManyToManyField(related_name='%(class)s_allowed_provider_content', to='contenttypes.contenttype')),
                ('session_service', models.ManyToManyField(related_name='%(class)s_allowed_service', to='services.servicescontainer')),
            ],
            options={
                'abstract': False,
            },
            bases=(task.time_master.TaskTimable, models.Model),
        ),
        migrations.CreateModel(
            name='CoEnvSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('overwatchers_restrict', models.BooleanField(default=False)),
                ('service_receiver_restrict', models.BooleanField(default=False)),
                ('service_providers_restrict', models.BooleanField(default=False)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_float_models', to='organizations.organization')),
                ('overwatchers', models.ManyToManyField(related_name='%(class)s_attending_overwatcher', to=settings.AUTH_USER_MODEL)),
                ('service_providers', models.ManyToManyField(related_name='%(class)s_attending_providers', to=settings.AUTH_USER_MODEL)),
                ('service_receiver', models.ManyToManyField(related_name='%(class)s_attending_reciever', to=settings.AUTH_USER_MODEL)),
                ('session_provider', models.ManyToManyField(related_name='%(class)s_hosting_enviroment', to=settings.AUTH_USER_MODEL)),
                ('session_provider_class', models.ManyToManyField(related_name='%(class)s_allowed_provider_content', to='contenttypes.contenttype')),
                ('session_service', models.ManyToManyField(related_name='%(class)s_allowed_service', to='services.servicescontainer')),
                ('enviroment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_sessions', to='session.enviromentalsession')),
            ],
            options={
                'abstract': False,
            },
            bases=(task.time_master.TaskTimable, models.Model),
        ),
        migrations.CreateModel(
            name='FloaterSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('overwatchers_restrict', models.BooleanField(default=False)),
                ('service_receiver_restrict', models.BooleanField(default=False)),
                ('service_providers_restrict', models.BooleanField(default=False)),
                ('active_time', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_sessions', to='tiempo.wyzfloatmodel')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_float_models', to='organizations.organization')),
                ('overwatchers', models.ManyToManyField(related_name='%(class)s_attending_overwatcher', to=settings.AUTH_USER_MODEL)),
                ('service_providers', models.ManyToManyField(related_name='%(class)s_attending_providers', to=settings.AUTH_USER_MODEL)),
                ('service_receiver', models.ManyToManyField(related_name='%(class)s_attending_reciever', to=settings.AUTH_USER_MODEL)),
                ('session_provider', models.ManyToManyField(related_name='%(class)s_hosting_enviroment', to=settings.AUTH_USER_MODEL)),
                ('session_provider_class', models.ManyToManyField(related_name='%(class)s_allowed_provider_content', to='contenttypes.contenttype')),
                ('session_service', models.ManyToManyField(related_name='%(class)s_allowed_service', to='services.servicescontainer')),
            ],
            options={
                'abstract': False,
            },
            bases=(task.time_master.TaskTimable, models.Model),
        ),
        migrations.CreateModel(
            name='OverLapDecision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='overlapping_decisiomaker1', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='overlapping_decisiomaker2', to=settings.AUTH_USER_MODEL)),
                ('overlap_sessions', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='decision', to='session.overlappingsessions')),
            ],
        ),
        migrations.CreateModel(
            name='SessionsContainer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.SlugField(blank=True, max_length=250, null=True)),
                ('object_id', models.IntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='contenttypes.contenttype')),
            ],
            bases=(options.clean.ObjectCleaner, models.Model),
        ),
        migrations.AddField(
            model_name='overlappingsessions',
            name='session1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overlapInvolvement1', to='session.sessionscontainer'),
        ),
        migrations.AddField(
            model_name='overlappingsessions',
            name='session2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overlapInvolvement2', to='session.sessionscontainer'),
        ),
        migrations.AddConstraint(
            model_name='overlappingsessions',
            constraint=models.UniqueConstraint(fields=('session1', 'session2'), name='unique'),
        ),
    ]
